<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academic | Guy Abel</title>
    <link>https://guyabel.com/tag/academic/</link>
      <atom:link href="https://guyabel.com/tag/academic/index.xml" rel="self" type="application/rss+xml" />
    <description>Academic</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-uk</language><copyright>Â© 2025 Guy Abel</copyright><lastBuildDate>Tue, 15 Nov 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://guyabel.com/media/icon_hua235b20c26de23a006d4e436991121ab_642_512x512_fill_lanczos_center_2.png</url>
      <title>Academic</title>
      <link>https://guyabel.com/tag/academic/</link>
    </image>
    
    <item>
      <title>Animated population tree maps</title>
      <link>https://guyabel.com/post/animated-population-treemaps/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://guyabel.com/post/animated-population-treemaps/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;The global population hit 8 billion &lt;a href=&#34;https://www.un.org/en/desa/world-population-reach-8-billion-15-november-2022&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;today&lt;/a&gt;. To mark the passing an absolute population total I created some animated tree map plots in R to visualize relative past and future population totals for all countries.&lt;/p&gt;
&lt;h2 id=&#34;plots&#34;&gt;Plots&lt;/h2&gt;
&lt;p&gt;The first animated plot shows the changes over time in the distribution of population totals based on the latest &lt;a href=&#34;https://population.un.org/wpp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;United Nations&lt;/a&gt; data, provided in the &lt;a href=&#34;https://github.com/PPgp/wpp2022&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wpp2022&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;abel-tree-pop.gif&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;The second animation shows the changes over time in the distribution of population with at least a completed secondary education. Country estimates and projections were obtained from the &lt;a href=&#34;http://dataexplorer.wittgensteincentre.org/wcde-v2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wittgenstein Centre for Human Capital and Demography&lt;/a&gt; via the &lt;a href=&#34;https://guyabel.github.io/wcde/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wcde&lt;/a&gt; package that I helped develop. The past estimates of education specific populations are based on a method to breakdown the United Nations population data. However, the future population totals (and the relative size of each country) differ between the United Nations and the Wittgenstein Centre as each group use separate assumptions and methods in their projection models.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;abel-tree-hc.gif&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;r-code&#34;&gt;R Code&lt;/h2&gt;
&lt;p&gt;Commented code to create the animated plots below are in two Gist &lt;a href=&#34;https://gist.github.com/guyabel/2307ecdd9844b6fd504b97144758a656&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/guyabel/56f6b7750c44d1444675d93a599cccaa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. You can run the script directly in R using the following&amp;hellip;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(devtools)
# UN population data
source_gist(&#34;https://gist.github.com/guyabel/2307ecdd9844b6fd504b97144758a656&#34;)
# Wittgenstein Centre completed secondary education population data
source_gist(&#34;https://gist.github.com/guyabel/56f6b7750c44d1444675d93a599cccaa&#34;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first part of each script imports the data into R, adds the continent and region names to help order the layout, and adds short country names for labels used in the plot.&lt;/p&gt;
&lt;p&gt;The second part of the code creates a function for a single tree plot in a specific year. The function is then used twice. First to animate past data and second to animate future data. I created separate animations to allow for a pause in the GIF at 2022 and to signal in the title that data for future population distributions are based on projections.&lt;/p&gt;
&lt;p&gt;The key to the animating tree maps is to set &lt;code&gt;layout = &amp;quot;fixed&amp;quot;&lt;/code&gt; in the &lt;code&gt;geom_treemap()&lt;/code&gt; function (in the &lt;a href=&#34;https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;treemapify&lt;/a&gt; package). I chose to group the countries by continent and then sub-region, locating neighbouring counties in the same part of the tree map and using the same fill colour.&lt;/p&gt;
&lt;p&gt;The third part of the code generates two separate GIF files for each time period and then combines them into one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Animated Sankey plots of global migrant populations</title>
      <link>https://guyabel.com/post/animated-sankey/</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
      <guid>https://guyabel.com/post/animated-sankey/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Sankey plots have been used to visualize bilateral migration many times. My favorite examples of Sankey plots for migration data tend to be when there are only few regions or countries. As the number of regions or countries increases the plot become more cumbersome, where labels for the smaller areas get too small and the plotting area becomes a very long rectangle making it awkward to fit on paper or view on the screen. In such cases I prefer &lt;a href=&#34;https://guyabel.com/post/global-migrant-stocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chord diagrams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The recent highlights &lt;a href=&#34;https://www.un.org/development/desa/pd/sites/www.un.org.development.desa.pd/files/undesa_pd_2020_international_migration_highlights.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;document&lt;/a&gt; for the UN international migration stock data contained a couple of Sankey plots for the data in 2020. In this post I have created animated versions of one of the plots in the report to show changes in migrant distributions between 1990 and 2020 by World Bank income groups. I am using the destination and origin migrant stock data of the UN that can found online &lt;a href=&#34;https://www.un.org/development/desa/pd/content/international-migrant-stock&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; - see the data links on the right hand side.&lt;/p&gt;
&lt;h2 id=&#34;r-code&#34;&gt;R Code&lt;/h2&gt;
&lt;p&gt;Commented code to create the animated plots below are in a Gist &lt;a href=&#34;https://gist.github.com/guyabel/f7c844f18c4d11916a6ee000532d0e8e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. You can run the script directly in R using the following&amp;hellip;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(devtools)
source_gist(&#34;https://gist.github.com/guyabel/f7c844f18c4d11916a6ee000532d0e8e&#34;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip;so long as you have installed all packages used in the script. You might also need to edit the &lt;code&gt;saveVideo()&lt;/code&gt; function for the location of &lt;code&gt;ffmpeg.exe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first part of the code imports the data into R, extracts the rows for the stock data by the World Bank income groups and creates a tweened data set for each frame of the animation.&lt;/p&gt;
&lt;p&gt;The second part of the code creates the animated plot file using ggplot and &lt;code&gt;geom_parallel_sets()&lt;/code&gt; in &lt;a href=&#34;https://ggforce.data-imaginist.com/reference/geom_parallel_sets.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggforce&lt;/a&gt;. There are a few packages in R that have functions for Sankey plots, for example &lt;a href=&#34;https://github.com/gaborcsardi/sankey#readme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sankey&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/web/packages/PantaRhei/vignettes/panta-rhei.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PantaRhei&lt;/a&gt;, &lt;a href=&#34;http://christophergandrud.github.io/networkD3/#sankey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;networkD3&lt;/a&gt;, &lt;a href=&#34;https://cran.rstudio.com/web/packages/sankeywheel/vignettes/sankeywheel.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sankeywheel&lt;/a&gt;, &lt;a href=&#34;https://plotly.com/r/sankey-diagram/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;plotly&lt;/a&gt; and &lt;a href=&#34;https://github.com/davidsjoberg/ggsankey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggsankey&lt;/a&gt;. The &lt;a href=&#34;https://corybrunson.github.io/ggalluvial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggalluvial&lt;/a&gt; packages also produces Sankey-type plots, but without spaces between each sector. I used ggforce because it is pretty easy to tweak the non-Sankey parts of the plot using ggplot functions, and  I had hoped that it would play well with gganimate - which it didn&amp;rsquo;t, hence the use of tweenr - but perhaps &lt;a href=&#34;https://github.com/thomasp85/ggforce/issues/235&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;one day&lt;/a&gt; it will.&lt;/p&gt;
&lt;h2 id=&#34;plots&#34;&gt;Plots&lt;/h2&gt;
&lt;p&gt;The first animated plot shows the changes over time where the y-axis increases as the migrant populations grow larger. It shows the evolution in the relative distributions of the origin, destination and the linking migrant corridors, in particular the relative growth of migrants in high income countries.&lt;/p&gt;
&lt;style&gt;
.carousel-indicators {
  bottom:-3%
}
.carousel-indicators &gt; li,
.carousel-indicators &gt; li.active{
    width: 40%;
    height: 2%;
    border-radius: 0;
    border: solid 1px grey;
    background: transparent;
    text-indent: 0;
    text-align: center;
}
.carousel-indicators &gt; li.active {
    background: #4caf50;
}
video {
  /* override other styles to make responsive */
  width: 100%    !important;
  height: auto   !important;
  max-height: 720px
}
&lt;/style&gt;
&lt;div id=&#34;carousel_free&#34; class=&#34;carousel slide&#34;&gt;
  &lt;ol class=&#34;carousel-indicators&#34;&gt;
    &lt;li data-target=&#34;#carousel_free&#34; data-slide-to=&#34;0&#34; class=&#34;active&#34;&gt;Known Origins&lt;/li&gt;
    &lt;li data-target=&#34;#carousel_free&#34; data-slide-to=&#34;1&#34;&gt;All Origins&lt;/li&gt;
  &lt;/ol&gt;
  &lt;div class=&#34;carousel-inner&#34;&gt;
    &lt;div class=&#34;carousel-item active&#34;&gt;
            &lt;video loop=&#34;loop&#34; width=&#34;720&#34; height=&#34;720&#34; controls muted playsinline preload=&#34;none&#34; poster=&#34;abel_free.png&#34;&gt;
        &lt;source src=&#34;abel_free.mp4&#34; type=&#34;video/mp4&#34; /&gt;
      &lt;/video&gt;
    &lt;/div&gt;
    &lt;div class=&#34;carousel-item&#34;&gt;
            &lt;video loop=&#34;loop&#34; width=&#34;720&#34; height=&#34;720&#34; controls muted playsinline preload=&#34;none&#34; poster=&#34;abel_free_unkown.png&#34;&gt;
        &lt;source src=&#34;abel_free_unknown.mp4&#34; type=&#34;video/mp4&#34; /&gt;
      &lt;/video&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;Note: you might have to right click, select show controls and hit play to start the animations depending on your browsers - right clicking can also allow you to access controls on the play back speed and save the video if you want to use it elsewhere.&lt;/p&gt;
&lt;p&gt;The second animated plot shows the changes over time where the y-axis is fixed to its maximum level. The adjustment allows the Sankey to grow into the plot space to see more clearly the changes in the overall levels of migrant populations.&lt;/p&gt;
&lt;div id=&#34;carousel_forced2&#34; class=&#34;carousel slide&#34;&gt;
  &lt;ol class=&#34;carousel-indicators&#34;&gt;
    &lt;li data-target=&#34;#carousel_forced2&#34; data-slide-to=&#34;0&#34; class=&#34;active&#34;&gt;Known Origins&lt;/li&gt;
    &lt;li data-target=&#34;#carousel_forced2&#34; data-slide-to=&#34;1&#34;&gt;All Origins&lt;/li&gt;
  &lt;/ol&gt;
  &lt;div class=&#34;carousel-inner&#34;&gt;
    &lt;div class=&#34;carousel-item active&#34;&gt;
      &lt;video loop width=&#34;720&#34; height=&#34;720&#34; controls muted playsinline preload=&#34;none&#34; poster=&#34;abel_fixed.png&#34;&gt;
        &lt;source src=&#34;abel_fixed.mp4&#34; type=&#34;video/mp4&#34; /&gt;
      &lt;/video&gt;
    &lt;/div&gt;
    &lt;div class=&#34;carousel-item&#34;&gt;
      &lt;video loop width=&#34;720&#34; height=&#34;720&#34; controls muted playsinline preload=&#34;none&#34; poster=&#34;abel_fixed_unknown.png&#34;&gt;
        &lt;source src=&#34;abel_fixed_unknown.mp4&#34; type=&#34;video/mp4&#34;/&gt;
      &lt;/video&gt; 
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;For both plots above there are alternative versions, that include an additional origin category for unknown place of birth. The values for the stock of migrants with unknown origins living in each World Bank income group are not in the main data frame in the UN excel sheet, but are in the regional aggregate sheets for each period. As a result the data importing and manipulation takes a bit of extra work (it is commented out in the Gist R script), but the plots are more &amp;lsquo;complete&amp;rsquo;, where the totals of the sectors sum to the global estimate of the UN at each time point.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Expand broom::tidy() output for categorical parameter estimates</title>
      <link>https://guyabel.com/post/tidycat/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://guyabel.com/post/tidycat/</guid>
      <description>&lt;div&gt;&lt;img src=&#34;featured.png&#34; width=&#34;200px&#34; align=&#34;right&#34;&gt;&lt;/div&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;tidycat&lt;/code&gt; package includes the &lt;code&gt;tidy_categorical()&lt;/code&gt; function to expand &lt;code&gt;broom::tidy()&lt;/code&gt; outputs for categorical parameter estimates.&lt;/p&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;For full documentation, see the package vignette: &lt;a href=&#34;https://cran.r-project.org/web/packages/tidycat/vignettes/intro.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The tidycat package: expand broom::tidy() output for categorical parameter estimates&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hello-world&#34;&gt;Hello World&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;tidy()&lt;/code&gt; function in the broom package takes the messy output of built-in functions in R, such as &lt;code&gt;lm()&lt;/code&gt;, and turns them into tidy data frames.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)
library(broom)

m1 &amp;lt;- mtcars %&amp;gt;%
  mutate(transmission = recode_factor(am, `0` = &amp;quot;automatic&amp;quot;, `1` = &amp;quot;manual&amp;quot;)) %&amp;gt;%
  lm(mpg ~ transmission + wt *  as.factor(cyl), data = .)

tidy(m1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 5
##   term               estimate std.error statistic       p.value
##   &amp;lt;chr&amp;gt;                 &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;
## 1 (Intercept)          41.5        4.54     9.14  0.00000000190
## 2 transmissionmanual   -0.902      1.51    -0.595 0.557        
## 3 wt                   -6.19       1.65    -3.75  0.000937     
## 4 as.factor(cyl)6      -8.66      10.4     -0.836 0.411        
## 5 as.factor(cyl)8     -16.9        5.27    -3.20  0.00374      
## 6 wt:as.factor(cyl)6    2.12       3.40     0.625 0.538        
## 7 wt:as.factor(cyl)8    3.84       1.77     2.17  0.0399
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;tidy_categorical()&lt;/code&gt; function adds&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;further columns (&lt;code&gt;variable&lt;/code&gt;, &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;effect&lt;/code&gt;) to the &lt;code&gt;broom::tidy()&lt;/code&gt; output to help manage categorical variables&lt;/li&gt;
&lt;li&gt;further rows for reference category terms and a column to indicate their location (&lt;code&gt;reference&lt;/code&gt;) when setting &lt;code&gt;include_reference = TRUE&lt;/code&gt; (default)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It requires two inputs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a data frame &lt;code&gt;d&lt;/code&gt; of parameter estimates from a model from &lt;code&gt;broom::tidy()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the corresponding model object &lt;code&gt;m&lt;/code&gt; passed to &lt;code&gt;broom::tidy()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidycat)
d1 &amp;lt;- m1 %&amp;gt;%
  tidy(conf.int = TRUE) %&amp;gt;%
  tidy_categorical(m = m1)
d1 %&amp;gt;%
  select(-(3:5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 8
##    term      estimate conf.low conf.high variable    level  effect  reference   
##    &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;fct&amp;gt;  &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       
##  1 (Interce~   41.5     32.1       50.8  (Intercept) (Inte~ main    Non-Baselin~
##  2 &amp;lt;NA&amp;gt;         0        0          0    transmissi~ autom~ main    Baseline Ca~
##  3 transmis~   -0.902   -4.02       2.22 transmissi~ manual main    Non-Baselin~
##  4 wt          -6.19    -9.59      -2.79 wt          wt     main    Non-Baselin~
##  5 &amp;lt;NA&amp;gt;         0        0          0    as.factor(~ 4      main    Baseline Ca~
##  6 as.facto~   -8.66   -30.0       12.7  as.factor(~ 6      main    Non-Baselin~
##  7 as.facto~  -16.9    -27.7       -6.00 as.factor(~ 8      main    Non-Baselin~
##  8 &amp;lt;NA&amp;gt;         0        0          0    wt:as.fact~ 4      intera~ Baseline Ca~
##  9 wt:as.fa~    2.12    -4.87       9.12 wt:as.fact~ 6      intera~ Non-Baselin~
## 10 wt:as.fa~    3.84     0.192      7.50 wt:as.fact~ 8      intera~ Non-Baselin~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expanded data frame from &lt;code&gt;tidy_categorical()&lt;/code&gt; of parameter estimates can be particularly useful for creating coefficient plots, allowing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grouping terms from the same categorical variable from the additional columns.&lt;/li&gt;
&lt;li&gt;inclusion of reference categories in a coefficient plot from the additional rows, allowing the reader to better grasp the meaning of the parameter estimates in each categorical variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(forcats)
library(ggplot2)
library(ggforce)

d1 %&amp;gt;%
  slice(-1) %&amp;gt;%
  mutate(variable = fct_inorder(variable)) %&amp;gt;%
  ggplot(mapping = aes(x = level, y = estimate, colour = reference,
                       ymin = conf.low, ymax = conf.high)) +
  facet_row(facets = &amp;quot;variable&amp;quot;, scales = &amp;quot;free_x&amp;quot;, space = &amp;quot;free&amp;quot;) +
  geom_hline(yintercept = 0, linetype = &amp;quot;dashed&amp;quot;) +
  geom_pointrange()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://guyabel.com/post/tidycat/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;You can install the released version of tidycat from &lt;a href=&#34;https://CRAN.R-project.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN&lt;/a&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;tidycat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the development version from &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;guyabel/tidycat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>R code for chord diagrams of Chinese internal migration</title>
      <link>https://guyabel.com/post/chinese-migration-chord-diagram/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://guyabel.com/post/chinese-migration-chord-diagram/</guid>
      <description>&lt;p&gt;We have had a number of requests for the R code to replicate the plots in our &lt;a href=&#34;https://guyabel.com/publication/china-internal-migration-2010-15/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt; on internal migration in China. The code below will produce a similar looking plot, but I have taken out some of the arguments that were very specific to our plot that will not replicate well for other data.&lt;/p&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;The code is based on two data sets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bilateral flow data with three columns only (origin, destination and flow), see &lt;a href=&#34;https://gist.github.com/guyabel/c24d990abc2c692f2b63747ee42909eb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; for the file used below&lt;/li&gt;
&lt;li&gt;Region details used for plotting, see &lt;a href=&#34;https://gist.github.com/guyabel/2f52e1593ad951800d83530a58ce0079&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; for the file used below&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note, the names in the region data are the same as the ones used in the origin and destination data.&lt;/p&gt;
&lt;p&gt;We can read in the data using &lt;code&gt;read_csv()&lt;/code&gt; in the readr package&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)

d1 &amp;lt;- read_csv(&amp;quot;https://gist.githubusercontent.com/guyabel/c24d990abc2c692f2b63747ee42909eb/raw/6b255edee7e01ca31b856152d18ae10ad50badd5/china_flow_2010_2015.csv&amp;quot;)

d1 &amp;lt;- mutate(d1, flow = flow/1e6)
d1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 961 x 3
##    orig           dest      flow
##    &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 Beijing        Beijing 0     
##  2 Tianjin        Beijing 0.0674
##  3 Hebei          Beijing 0.864 
##  4 Shanxi         Beijing 0.225 
##  5 Inner Mongolia Beijing 0.103 
##  6 Liaoning       Beijing 0.155 
##  7 Jilin          Beijing 0.105 
##  8 Heilongjiang   Beijing 0.194 
##  9 Shanghai       Beijing 0.0266
## 10 Jiangsu        Beijing 0.111 
## # ... with 951 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d2 &amp;lt;- read_csv(&amp;quot;https://gist.githubusercontent.com/guyabel/2f52e1593ad951800d83530a58ce0079/raw/165843fdd4afc61e17cd7658563e573c1e74fb57/china_region_details.csv&amp;quot;)
d2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 31 x 6
##    name      region order colour    gap name_zh
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  
##  1 Beijing   East       1 #B61416     2 &amp;lt;U+5317&amp;gt;&amp;lt;U+4EAC&amp;gt;   
##  2 Tianjin   East       2 #C01517     2 &amp;lt;U+5929&amp;gt;&amp;lt;U+6D25&amp;gt;   
##  3 Hebei     East       3 #CA1718     2 &amp;lt;U+6CB3&amp;gt;&amp;lt;U+5317&amp;gt;   
##  4 Shandong  East       4 #D4181A     2 &amp;lt;U+5C71&amp;gt;&amp;lt;U+4E1C&amp;gt;   
##  5 Jiangsu   East       5 #DE191B     2 &amp;lt;U+6C5F&amp;gt;&amp;lt;U+82CF&amp;gt;   
##  6 Shanghai  East       6 #E91A1C     2 &amp;lt;U+4E0A&amp;gt;&amp;lt;U+6D77&amp;gt;   
##  7 Zhejiang  East       7 #F31B1D     2 &amp;lt;U+6D59&amp;gt;&amp;lt;U+6C5F&amp;gt;   
##  8 Fujian    East       8 #FD1C1F     2 &amp;lt;U+798F&amp;gt;&amp;lt;U+5EFA&amp;gt;   
##  9 Guangdong East       9 #FF1E20     2 &amp;lt;U+5E7F&amp;gt;&amp;lt;U+4E1C&amp;gt;   
## 10 Hainan    East      10 #FF1F21     6 &amp;lt;U+6D77&amp;gt;&amp;lt;U+5357&amp;gt;   
## # ... with 21 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;plot&#34;&gt;Plot&lt;/h2&gt;
&lt;p&gt;The code below plots the chord diagram without the default labels and axis for the &lt;code&gt;chordDiagram()&lt;/code&gt; function, that are added later in the &lt;code&gt;circos.track()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(circlize)

circos.clear()
circos.par(track.margin = c(0.01, -0.01), start.degree = 90, gap.degree = d2$gap)

chordDiagram(x = d1, order = d2$name, 
             grid.col = d2$colour, transparency = 0.25,
             directional = 1, direction.type = c(&amp;quot;diffHeight&amp;quot;, &amp;quot;arrows&amp;quot;),
             link.arr.type = &amp;quot;big.arrow&amp;quot;, diffHeight = -0.04, 
             link.sort = TRUE, link.largest.ontop = TRUE, 
             annotationTrack = &amp;quot;grid&amp;quot;,
             preAllocateTracks = list(track.height = 0.25))

circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y) {
  s = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
  xx = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
  circos.text(x = mean(xx), y = 0.2, 
              labels = s, cex = 0.7, adj = c(0, 0.5),
              facing = &amp;quot;clockwise&amp;quot;, niceFacing = TRUE)
  circos.axis(h = &amp;quot;bottom&amp;quot;,
              labels.cex = 0.5,
              labels.pos.adjust = FALSE,
              labels.niceFacing = FALSE)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The legend is added using the &lt;code&gt;legend()&lt;/code&gt; function using the &lt;a href=&#34;http://colorbrewer2.org/#type=qualitative&amp;amp;scheme=Set1&amp;amp;n=4]&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Set1&lt;/a&gt; colour palette, that we used as the basis of regional shades in the colour column of &lt;code&gt;d2&lt;/code&gt;; see the &lt;a href=&#34;[https://cran.r-project.org/web/packages/shades/index.html]&#34;&gt;shades&lt;/a&gt; package for creating palettes of similar colours.&lt;/p&gt;
&lt;h2 id=&#34;legend&#34;&gt;Legend&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(RColorBrewer)
legend(x = 0.7, y = 1.1, 
       legend = unique(d2$region), 
       fill = brewer.pal(n = 4, name = &amp;quot;Set1&amp;quot;), 
       bty = &amp;quot;n&amp;quot;, cex = 0.8,
       x.intersp = 0.5, 
       title = &amp;quot;   Region&amp;quot;, title.adj = 0) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;saving&#34;&gt;Saving&lt;/h2&gt;
&lt;p&gt;To save the image in a PDF plot surround the plotting code above between the &lt;code&gt;pdf()&lt;/code&gt; function and &lt;code&gt;dev.off()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pdf(file = &amp;quot;figure1.pdf&amp;quot;, width = 6, height = 6)

### insert code from above

dev.off()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;image-files&#34;&gt;Image Files&lt;/h2&gt;
&lt;p&gt;To convert the PDF to a PNG file I recommend the &lt;a href=&#34;https://cran.r-project.org/web/packages/magick/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;magick&lt;/a&gt; package:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(magick)
p &amp;lt;- image_read_pdf(&amp;quot;figure1.pdf&amp;quot;)
image_write(image = p, path = &amp;quot;figure1.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chinese-labels&#34;&gt;Chinese Labels&lt;/h2&gt;
&lt;p&gt;To replace the labels with their Chinese names, as in the plot above, replace the code for the &lt;code&gt;s&lt;/code&gt; object in the &lt;code&gt;circos.track()&lt;/code&gt; function to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    s = d2 %&amp;gt;% 
      filter(name == get.cell.meta.data(&amp;quot;sector.index&amp;quot;)) %&amp;gt;%
      select(name_zh) %&amp;gt;%
      pull()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might also need to add &lt;code&gt;family = &amp;quot;GB1&amp;quot;&lt;/code&gt; in the &lt;code&gt;pdf()&lt;/code&gt; function for Chinese characters to render in a PDF viewer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R code for animated chord diagrams</title>
      <link>https://guyabel.com/post/animated-directional-chord-diagrams/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://guyabel.com/post/animated-directional-chord-diagrams/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;A little while ago my paper in &lt;em&gt;International Migration Review&lt;/em&gt; on global migration flow estimates came out &lt;a href=&#34;http://guyabel.com/publication/global-migration-estimates-by-gender/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;online&lt;/a&gt;. The paper includes a number of directional chord diagrams to visualize the estimates.&lt;/p&gt;
&lt;p&gt;Recently I have been playing around &lt;code&gt;tweenr&lt;/code&gt; and the &lt;code&gt;magick&lt;/code&gt; packages for animated population pyramids. In this post I attempt to show how to use these packages to produce animated directional chord diagrams of global migration flow estimates&lt;/p&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;The first step is to read into R two data frames (these are in my &lt;code&gt;migest&lt;/code&gt; R package if you wish to replicate the code below).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Time series of bilateral migration flow estimates:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&amp;quot;migest&amp;quot;)
library(tidyverse)
d0 &amp;lt;- read_csv(system.file(&amp;quot;imr&amp;quot;, &amp;quot;reg_flow.csv&amp;quot;, package = &amp;quot;migest&amp;quot;))
d0 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 891 Ã 4
##    year0 orig_reg     dest_reg                         flow
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;                           &amp;lt;dbl&amp;gt;
##  1  1960 Africa       Africa                        1377791
##  2  1960 Africa       Eastern Asia                     5952
##  3  1960 Africa       Eastern Europe &amp;amp; Central Asia    7303
##  4  1960 Africa       Europe                         919252
##  5  1960 Africa       Latin America &amp;amp; Caribbean       15796
##  6  1960 Africa       Northern America                82463
##  7  1960 Africa       Oceania                         32825
##  8  1960 Africa       Southern Asia                   35603
##  9  1960 Africa       Western Asia                   106580
## 10  1960 Eastern Asia Africa                          37301
## # â¦ with 881 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Some regional meta data for chord diagram plots:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d1 &amp;lt;- read_csv(system.file(&amp;quot;vidwp&amp;quot;, &amp;quot;reg_plot.csv&amp;quot;, package = &amp;quot;migest&amp;quot;))
d1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 Ã 5
##   region                        order1 col1    reg1           reg2          
##   &amp;lt;chr&amp;gt;                          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;         
## 1 Northern America                   1 #40A4D8 Northern       America       
## 2 Africa                             2 #33BEB7 Africa         &amp;lt;NA&amp;gt;          
## 3 Europe                             3 #B2C224 Europe         &amp;lt;NA&amp;gt;          
## 4 Eastern Europe &amp;amp; Central Asia      4 #FECC2F Eastern Europe &amp;amp; Central Asia
## 5 Western Asia                       5 #FBA127 Western        Asia          
## 6 Southern Asia                      6 #F66320 Southern       Asia          
## 7 Eastern Asia                       7 #DB3937 Eastern        Asia          
## 8 Oceania                            8 #A463D7 Oceania        &amp;lt;NA&amp;gt;          
## 9 Latin America &amp;amp; Caribbean          9 #0C5BCE Latin America  &amp;amp; Caribbean
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tween&#34;&gt;Tween&lt;/h2&gt;
&lt;p&gt;The next step is to tween the data by migration corridor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tweenr)

d2 &amp;lt;- d0 %&amp;gt;%
  mutate(corridor = paste(orig_reg, dest_reg, sep = &amp;quot; -&amp;gt; &amp;quot;)) %&amp;gt;%
  select(corridor, year0, flow) %&amp;gt;%
  mutate(ease = &amp;quot;linear&amp;quot;) %&amp;gt;%
  tween_elements(time = &amp;quot;year0&amp;quot;, group = &amp;quot;corridor&amp;quot;, ease = &amp;quot;ease&amp;quot;, nframes = 100) %&amp;gt;%
  as_tibble()
d2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,181 Ã 4
##    year0    flow .frame .group                                 
##    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                  
##  1  1960 1377791      0 Africa -&amp;gt; Africa                       
##  2  1960    5952      0 Africa -&amp;gt; Eastern Asia                 
##  3  1960    7303      0 Africa -&amp;gt; Eastern Europe &amp;amp; Central Asia
##  4  1960  919252      0 Africa -&amp;gt; Europe                       
##  5  1960   15796      0 Africa -&amp;gt; Latin America &amp;amp; Caribbean    
##  6  1960   82463      0 Africa -&amp;gt; Northern America             
##  7  1960   32825      0 Africa -&amp;gt; Oceania                      
##  8  1960   35603      0 Africa -&amp;gt; Southern Asia                
##  9  1960  106580      0 Africa -&amp;gt; Western Asia                 
## 10  1960   37301      0 Eastern Asia -&amp;gt; Africa                 
## # â¦ with 8,171 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates larger data frame &lt;code&gt;d2&lt;/code&gt;, with 100 observations for each corridor, one for each frame in the animation. In the original data &lt;code&gt;d0&lt;/code&gt; there are only 11 observations for each corridor, one for each five-year period.&lt;/p&gt;
&lt;p&gt;Then some further minor data wrangling is required to ready the data for plotting using the &lt;code&gt;chordDiagram&lt;/code&gt; function; namely the first three columns in the data must correspond to the origin, destination and flow.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d2 &amp;lt;- d2 %&amp;gt;%
  separate(col = .group, into = c(&amp;quot;orig_reg&amp;quot;, &amp;quot;dest_reg&amp;quot;), sep = &amp;quot; -&amp;gt; &amp;quot;) %&amp;gt;%
  select(orig_reg, dest_reg, flow, everything()) %&amp;gt;%
  mutate(flow = flow/1e06)
d2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,181 Ã 5
##    orig_reg     dest_reg                         flow year0 .frame
##    &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;                           &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
##  1 Africa       Africa                        1.38     1960      0
##  2 Africa       Eastern Asia                  0.00595  1960      0
##  3 Africa       Eastern Europe &amp;amp; Central Asia 0.00730  1960      0
##  4 Africa       Europe                        0.919    1960      0
##  5 Africa       Latin America &amp;amp; Caribbean     0.0158   1960      0
##  6 Africa       Northern America              0.0825   1960      0
##  7 Africa       Oceania                       0.0328   1960      0
##  8 Africa       Southern Asia                 0.0356   1960      0
##  9 Africa       Western Asia                  0.107    1960      0
## 10 Eastern Asia Africa                        0.0373   1960      0
## # â¦ with 8,171 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;plots-for-each-frame&#34;&gt;Plots for Each Frame&lt;/h2&gt;
&lt;p&gt;Now the data is in the correct format, chord diagrams can be produced for each frame of the eventual animation. To do this, I used a &lt;code&gt;for&lt;/code&gt; loop to cycle through the tweend data. The arguments I used in the &lt;code&gt;circos.par&lt;/code&gt;, &lt;code&gt;chordDiagram&lt;/code&gt; and &lt;code&gt;circos.track&lt;/code&gt; functions to produce each plot are explained in more detail in the comments of the &lt;code&gt;migest&lt;/code&gt; &lt;a href=&#34;https://github.com/guyabel/migest/blob/master/demo/cfplot_reg2.R&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;demo&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create a directory to store the individual plots
dir.create(&amp;quot;./plot-ani/&amp;quot;)

library(circlize)
for(f in unique(d2$.frame)){
  # open a PNG plotting device
  png(file = paste0(&amp;quot;./plot-ani/globalchord&amp;quot;, f, &amp;quot;.png&amp;quot;), height = 7, width = 7, 
      units = &amp;quot;in&amp;quot;, res = 500)
  
  # initialise the circos plot
  circos.clear()
  par(mar = rep(0, 4), cex=1)
  circos.par(start.degree = 90, track.margin=c(-0.1, 0.1), 
             gap.degree = 4, points.overflow.warning = FALSE)

  # plot the chord diagram
  chordDiagram(x = filter(d2, .frame == f), directional = 1, order = d1$region,
               grid.col = d1$col1, annotationTrack = &amp;quot;grid&amp;quot;,
               transparency = 0.25,  annotationTrackHeight = c(0.05, 0.1),
               direction.type = c(&amp;quot;diffHeight&amp;quot;, &amp;quot;arrows&amp;quot;), link.arr.type = &amp;quot;big.arrow&amp;quot;,
               diffHeight  = -0.04, link.sort = TRUE, link.largest.ontop = TRUE)
  
  # add labels and axis
  circos.track(track.index = 1, bg.border = NA, panel.fun = function(x, y) {
    xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
    sector.index = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
    reg1 = d1 %&amp;gt;% filter(region == sector.index) %&amp;gt;% pull(reg1)
    reg2 = d1 %&amp;gt;% filter(region == sector.index) %&amp;gt;% pull(reg2)
    
    circos.text(x = mean(xlim), y = ifelse(is.na(reg2), 3, 4),
                labels = reg1, facing = &amp;quot;bending&amp;quot;, cex = 1.1)
    circos.text(x = mean(xlim), y = 2.75, labels = reg2, facing = &amp;quot;bending&amp;quot;, cex = 1.1)
    circos.axis(h = &amp;quot;top&amp;quot;, labels.cex = 0.8
                labels.niceFacing = FALSE, labels.pos.adjust = FALSE)
  })
  
  # close plotting device
  dev.off()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-an-animation&#34;&gt;Creating an animation&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;magick&lt;/code&gt; package an animation can be created by using the code below to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read in an initial plot and then combine together all other images created above.&lt;/li&gt;
&lt;li&gt;Scale the combined images.&lt;/li&gt;
&lt;li&gt;Animate the combined images and save as a &lt;code&gt;.gif&lt;/code&gt; or &lt;code&gt;mp4&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(magick)

img &amp;lt;- image_read(path = &amp;quot;./plot-ani/globalchord0.png&amp;quot;)
for(f in unique(d2$.frame)[-1]){
  img0 &amp;lt;- image_read(path = paste0(&amp;quot;./plot-ani/globalchord&amp;quot;,f,&amp;quot;.png&amp;quot;))
  img &amp;lt;- c(img, img0)
  message(f)
}

img1 &amp;lt;- image_scale(image = img, geometry = &amp;quot;720x720&amp;quot;)

ani0 &amp;lt;- image_animate(image = img1, fps = 10)
image_write(image = ani0, path = &amp;quot;./plot-ani/globalchord.gif&amp;quot;)
image_write_video(image = img1, path = &amp;quot;./plot-ani/globalchord.mp4&amp;quot;, framerate = 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives an output much like this minus the additional details in the corners:&lt;/p&gt;
&lt;style&gt;
video {
  /* override other styles to make responsive */
  width: 100%    !important;
  height: auto   !important;
  max-height: 720px
}
&lt;/style&gt;
&lt;video loop controls muted playsinline preload=&#34;none&#34; poster=&#34;abel-ani10-gf-dist.png&#34;&gt;
&lt;source src=&#34;abel-ani10-gf-dist.mp4&#34; type=&#34;video/mp4&#34;/&gt;
&lt;/video&gt; 
&lt;h2 id=&#34;fixing-scales-in-chord-diagrams&#34;&gt;Fixing Scales in Chord Diagrams&lt;/h2&gt;
&lt;p&gt;Whilst the plot above allows comparisons of the distributions of flows overtime it is more difficult to compare volumes. For such comparisons, Zuguang Gu &lt;a href=&#34;http://zuguang.de/circlize_book/book/advanced-usage-of-chorddiagram.html#compare-two-chord-diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;suggests&lt;/a&gt; scaling the gaps between the sectors on the outside of the chord diagram. I wrote a little function that can do this for flow data arranged in a tidy format;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;scale_gap &amp;lt;- function(flow_m, flow_max, gap_at_max = 1, gaps = NULL) {
  p &amp;lt;- flow_m / flow_max
  if(length(gap_at_max) == 1 &amp;amp; !is.null(gaps)) {
    gap_at_max &amp;lt;- rep(gap_at_max, gaps)
  }
  gap_degree &amp;lt;- (360 - sum(gap_at_max)) * (1 - p)
  gap_m &amp;lt;- (gap_degree + sum(gap_at_max))/gaps
  return(gap_m)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flow_m&lt;/code&gt; is the size of total flows in the matrix for the given year being re-scaled.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flow_max&lt;/code&gt; is the maximum size of the flow matrix over all years&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gap_at_max&lt;/code&gt; is the size in degrees of the gaps in the flow matrix in the year where the flows are at their all time maximum.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gaps&lt;/code&gt; is the number of gaps in the chord diagram (i.e. the number of regions).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function can be used to derive the size of gaps in each frame for a new animation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d3 &amp;lt;- d2 %&amp;gt;%
  group_by(.frame) %&amp;gt;%
  summarise(flow = sum(flow)) %&amp;gt;%
  mutate(gaps = scale_gap(flow_m = flow, flow_max = max(.$flow), 
                          gap_at_max = 4, gaps = 9))

d3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 101 Ã 3
##    .frame  flow  gaps
##     &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1      0  17.6  25.9
##  2      1  17.8  25.7
##  3      2  18.1  25.6
##  4      3  18.3  25.4
##  5      4  18.5  25.2
##  6      5  18.7  25.1
##  7      6  18.9  24.9
##  8      7  19.1  24.7
##  9      8  19.3  24.6
## 10      9  19.6  24.4
## # â¦ with 91 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The calculations in &lt;code&gt;d3&lt;/code&gt; can then be plugged into the &lt;code&gt;for&lt;/code&gt; loop above, where the &lt;code&gt;circos.par()&lt;/code&gt; function is replaced by&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;circos.par(start.degree = 90, track.margin = c(-0.1, 0.1),
           gap.degree = filter(d3, .frame == f)$gaps, 
           points.overflow.warning = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the for loop has produced a new set of images, the same code to produce previous animation can be run to obtain the animated chord diagrams with changing gaps;&lt;/p&gt;
&lt;video loop controls muted playsinline preload=&#34;none&#34; poster=&#34;abel-ani10-gf-gap.png&#34;&gt;
&lt;source src=&#34;abel-ani10-gf-gap.mp4&#34; type=&#34;video/mp4&#34;/&gt;
&lt;/video&gt; 
&lt;p&gt;Whilst the sector axes are now fixed, I am not convinced that changing the relative gaps is the best way to compare volumes when using animated chord diagrams. The sectors of all regions - bar Northern America - are rotating making it hard follow their changes over time.&lt;/p&gt;
&lt;p&gt;Fortunately there is new &lt;code&gt;xmax&lt;/code&gt; option in &lt;code&gt;chordDiagram&lt;/code&gt; that can be used to fix the lengths of the x-axis for each sector using a named vector. In the context of producing an animation, the historic maximum migration flows (of combined immigration and emigration flows) in each region can be used, calculated from the original data &lt;code&gt;d0&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(magrittr)

reg_max &amp;lt;- d0 %&amp;gt;%
  group_by(year0, orig_reg) %&amp;gt;%
  mutate(tot_out = sum(flow)) %&amp;gt;%
  group_by(year0, dest_reg) %&amp;gt;%
  mutate(tot_in = sum(flow)) %&amp;gt;%
  filter(orig_reg == dest_reg) %&amp;gt;%
  mutate(tot = tot_in + tot_out) %&amp;gt;%
  mutate(reg = orig_reg) %&amp;gt;%
  group_by(reg) %&amp;gt;%
  summarise(tot_max = max(tot)/1e06) %$%
  &#39;names&amp;lt;-&#39;(tot_max, reg)

reg_max
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                        Africa                  Eastern Asia 
##                     17.429942                     14.805479 
## Eastern Europe &amp;amp; Central Asia                        Europe 
##                      8.361300                     15.536978 
##     Latin America &amp;amp; Caribbean              Northern America 
##                      7.697638                     10.416927 
##                       Oceania                 Southern Asia 
##                      2.968412                     15.067631 
##                  Western Asia 
##                     15.072561
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;reg_max&lt;/code&gt; object can then be used in the &lt;code&gt;chordDiagram&lt;/code&gt; function in the &lt;code&gt;for&lt;/code&gt; loop above, replacing the original call with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chordDiagram(x = filter(d2, .frame == f), directional = 1, order = d1$region,
             grid.col = d1$col1, annotationTrack = &amp;quot;grid&amp;quot;,
             transparency = 0.25,  annotationTrackHeight = c(0.05, 0.1),
             direction.type = c(&amp;quot;diffHeight&amp;quot;, &amp;quot;arrows&amp;quot;), link.arr.type = &amp;quot;big.arrow&amp;quot;,
             diffHeight  = -0.04, link.sort = TRUE, link.largest.ontop = TRUE, 
             xmax = reg_max)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the complete code - the adapted &lt;code&gt;for&lt;/code&gt; loop to produce the images and then the &lt;code&gt;magick&lt;/code&gt; functions to compile the animation - results in the following:&lt;/p&gt;
&lt;video loop controls muted playsinline preload=&#34;none&#34; poster=&#34;abel-ani10-gf-fix.png&#34;&gt;
  &lt;source src=&#34;abel-ani10-gf-fix.mp4&#34; type=&#34;video/mp4&#34;/&gt;
&lt;/video&gt; 
</description>
    </item>
    
  </channel>
</rss>
